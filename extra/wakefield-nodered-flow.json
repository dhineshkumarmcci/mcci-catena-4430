[
	{
	    "id": "d94d197e.b02ea",
	    "type": "subflow",
	    "name": "Prepare for RF Store",
	    "info": "This subflow prepares RF data for storage in the database.",
	    "in": [
		{
		    "x": 724.8888736300999,
		    "y": 507.2222069634331,
		    "wires": [
			{
			    "id": "a2df0f5f.c1e6"
			}
		    ]
		}
	    ],
	    "out": [
		{
		    "x": 1064.8888736300999,
		    "y": 507.2222069634331,
		    "wires": [
			{
			    "id": "a2df0f5f.c1e6",
			    "port": 0
			}
		    ]
		}
	    ]
	},
	{
	    "id": "a2df0f5f.c1e6",
	    "type": "function",
	    "z": "d94d197e.b02ea",
	    "name": "Prep for RF store",
	    "func": "var data_rate_re = /SF(\\d+)BW(\\d+)/;\nvar dataRateArray = data_rate_re.exec(msg.metadata.data_rate);\n\nfunction findBestGateway(g) {\n    var rssi = -1000;\n    var bestRssi;\n    var snr = -1000;\n    var bestSnr;\n\n    for (var i in g) {\n        if (g[i].rssi > rssi) {\n            rssi = g[i].rssi;\n            bestRssi = i;\n        }\n        if (g[i].snr > snr) {\n            snr = g[i].snr;\n            bestSnr = i;\n        }\n    }\n    \n    if (bestRssi == bestSnr)\n        return g[bestRssi];\n        \n    if (rssi < -80)\n        return g[bestSnr];\n    else\n        return g[bestRssi];\n}\n\nvar g = findBestGateway(msg.metadata.gateways);\n\nvar result = \n{\n    payload:\n[{\n    frequency: msg.metadata.frequency,\n    channel: g.channel,\n    datarate: msg.metadata.data_rate,\n    codingrate: msg.metadata.coding_rate,\n    spreadingFactor: Number(dataRateArray[1]),\n    bandwidth: Number(dataRateArray[2]),\n    rssi: g.rssi,\n    snr: g.snr,\n    msgID: msg._msgid,\n    counter: msg.counter,\n},\n{\n    devEUI: msg.hardware_serial,\n    devID: msg.dev_id,\n    displayName: msg.display_id,\n    displayKey: msg.display_key,\n    gatewayEUI: g.gtw_id,\n    nodeType: msg.local.nodeType,\n    platformType: msg.local.platformType,\n    radioType: msg.local.radioType,\n    applicationName: msg.local.applicationName,\n    // we make these tags so we can plot rssi by \n    // channel, etc.\n    frequency: msg.metadata.frequency,\n    channel: g.channel,\n    datarate: msg.metadata.data_rate,\n    spreadingFactor: Number(dataRateArray[1]),\n    bandwidth: Number(dataRateArray[2]),\n    codingrate: msg.metadata.coding_rate,\n}]\n};\nreturn result;",
	    "outputs": 1,
	    "noerr": 0,
	    "x": 894.8888736300999,
	    "y": 507.2222069634331,
	    "wires": [
		[]
	    ]
	},
	{
	    "id": "7d5b92cc.87fd5c",
	    "type": "subflow",
	    "name": "Set Node Mapping",
	    "info": "Input is a message\nOutput is same message, with display_key set to \"{app_id}.{dev_id}\" and display_name set to a friendly name from the built-in map.",
	    "in": [
		{
		    "x": 108,
		    "y": 350,
		    "wires": [
			{
			    "id": "869f01eb.168818"
			}
		    ]
		}
	    ],
	    "out": [
		{
		    "x": 515,
		    "y": 346,
		    "wires": [
			{
			    "id": "869f01eb.168818",
			    "port": 0
			}
		    ]
		}
	    ]
	},
	{
	    "id": "869f01eb.168818",
	    "type": "function",
	    "z": "7d5b92cc.87fd5c",
	    "name": "Map devID to friendy name",
	    "func": "// set up the table of names\nvar nodeMap = global.get(\"nodeMap\");\n//if (nodeMap === undefined)\n    {\n    // populate the map if needed.\n    nodeMap = {};\n    nodeMap['mcci-ghq-farm.catena4450m102-koipond'] = {display_id: \"Koi pond/garden\" };\n    nodeMap['mcci-engineering-test.test-44'] = {display_id:\"Terry's office\" };\n    nodeMap['mcci-ghq-power.ghq-power'] = {display_id:\"Basement\" };\n    nodeMap['mcci-ghq-power.ghq-server'] = {display_id:\"Server room\" };\n    nodeMap['mcci-ghq-power.gateway-96'] = {display_id:\"Gateway Commons\" };\n    nodeMap['mcci-ghq-power.gateway-95'] = {display_id:\"Gateway Center\" };\n    nodeMap['mcci-ghq-power.shursave-52'] = {display_id:\"ShurSave T'burg\" };\n    nodeMap['mcci-ghq-power.holt-45'] = {display_id:\"HOLT\" };\n    nodeMap['mcci-ghq-power.holt-46'] = {display_id:\"HOLT House\" };\n    nodeMap['mcci-ghq-power.holt-env-indoor-6f'] = {display_id:\"HOLT office env #1\" };\n    nodeMap['mcci-ghq-power.holt-env-outdoor-6f'] = {display_id:\"HOLT outdoor env #1\" };\n    nodeMap['mcci-ghq-power.ib-front-grid'] = {display_id:\"Ithaca Bakery front grid\" };\n    nodeMap['mcci-ghq-power.ib-front-solar'] = {display_id:\"Ithaca Bakery front solar\" };\n    nodeMap['mcci-ghq-power.ib-rear-grid'] = {display_id:\"Ithaca Bakery rear grid\" };\n    nodeMap['mcci-ghq-power.ib-rear-solar'] = {display_id:\"Ithaca Bakery rear solar\" };\n    nodeMap['mcci-engineering-test.test-04f'] = {display_id:\"Taitem grid\" };\n    nodeMap['mcci-engineering-test.test-050'] = {display_id:\"Taitem solar\" };\n    nodeMap['iseechange-01.iseechange-01-a2'] = {display_id:\"MCCI (Cadillac/Senate NW)\", lat: 29.99863, long: -90.08208 };\n    nodeMap['iseechange-01.iseechange-01-a3'] = {display_id:\"Milton/Cadillac East (1261 Milton)\", lat: 29.9956, long: -90.08139  };\n    nodeMap['iseechange-01.iseechange-01-a4'] = {display_id:\"MCCI (3934 Buchanan)\", lat: 29.99733, long: -90.08079 };\n    nodeMap['iseechange-01.iseechange-01-a5'] = {display_id:\"Buchanan/Milton SW\", lat:29.99565, long:-90.08068 }; \n    nodeMap['iseechange-01.iseechange-01-a6'] = {display_id:\"Buchanan/Milton NW\", lat:29.99551, long: -90.08067 };\n    nodeMap['iseechange-01.iseechange-01-ab'] = {display_id:\"Cadillac/Milton NE\", lat:29.99594, long:-90.08175 };\n    nodeMap['workbetter-02-66'] = {display_id:\"WorkBetter GCW #1\" };\n    nodeMap['workbetter-02-67'] = {display_id:\"WorkBetter GCW #2\" };\n\n    global.set(\"nodeMap\", nodeMap);\n    }\n\n// use app_id.dev_id to form a key\n// and put into the message\nvar sKey = msg.app_id + \".\" + msg.dev_id;\n\nmsg.display_key = sKey;\n\n// translate the key if needed.\nif (sKey in nodeMap)\n    {\n    msg.display_id = nodeMap[sKey].display_id;\n    if (\"lat\" in nodeMap[sKey])\n        msg.display_lat = nodeMap[sKey].lat;\n    if (\"long\" in nodeMap[sKey])\n        msg.display_long = nodeMap[sKey].long;\n    }\nelse\n    {\n    msg.display_id = sKey;\n    }\n\nreturn msg;",
	    "outputs": 1,
	    "noerr": 0,
	    "x": 316,
	    "y": 349,
	    "wires": [
		[]
	    ]
	},
	{
	    "id": "f1650fef.f0eb4",
	    "type": "subflow",
	    "name": "Catena Port 1 fmt 0x21 Message Decoder (4430 Activity Sensor)",
	    "info": "",
	    "in": [
		{
		    "x": 74,
		    "y": 157,
		    "wires": [
			{
			    "id": "170ccef1.151f61"
			}
		    ]
		}
	    ],
	    "out": [
		{
		    "x": 1195,
		    "y": 307,
		    "wires": [
			{
			    "id": "4f3360f.6e8332",
			    "port": 0
			}
		    ]
		},
		{
		    "x": 1197,
		    "y": 397,
		    "wires": [
			{
			    "id": "655c9127.68dfc8",
			    "port": 0
			}
		    ]
		},
		{
		    "x": 1204,
		    "y": 483,
		    "wires": [
			{
			    "id": "8dc48011.3c18f",
			    "port": 0
			}
		    ]
		}
	    ]
	},
	{
	    "id": "655c9127.68dfc8",
	    "type": "function",
	    "z": "f1650fef.f0eb4",
	    "name": "Prepare for DataBase",
	    "func": "var result =\n{\n    payload:\n[{\n        msgID: msg._msgid,\n        counter: msg.counter,\n        //time: new Date(msg.metadata.time).getTime(),\n},\n{\n    devEUI: msg.hardware_serial,\n    devID: msg.dev_id,\n    displayName: msg.display_id,\n    displayKey: msg.display_key,\n    nodeType: msg.local.nodeType,\n    platformType: msg.local.platformType,\n    radioType: msg.local.radioType,\n    applicationName: msg.local.applicationName,\n}]\n};\n\nvar t = result.payload[0];\nvar tags = result.payload[1];\n\n// copy the fields we want as values to the database slot 0.\nvar value_keys = [ \n            \"vBat\", \"vBus\", \"vSys\", \"boot\", \"tempC\", \"tDewC\", \"tHeatIndexC\", \"p\", \"p0\", \"rh\", \"irradiance\", \"activity\"\n            ];\n\n// copy the fields we want as tags to the database slot 1\nvar tag_keys = [\n    /* none */\n    ];\n\nfunction insert_value(pOutput, sInKey, inValue)\n    {\n    if (typeof inValue == \"object\" )\n        {\n        for (var i in inValue)\n            insert_value(pOutput, sInKey + \".\" + i, inValue[i]);\n        }\n    else\n        pOutput[sInKey] = inValue;\n    }\n\nfor (var i in value_keys)\n    {\n    var key = value_keys[i];\n    if (key in msg.payload)\n        {\n        // if we get an object generate an entry for each\n        insert_value(t, key, msg.payload[key]);\n        }\n    }\n\nfor (var i in tag_keys)\n    {\n    var key = tag_keys[i];\n    if (key in msg.payload)\n        tags[key] = msg.payload[key];\n    }\n\nreturn result;\n",
	    "outputs": 1,
	    "noerr": 0,
	    "x": 825.5001220703125,
	    "y": 403,
	    "wires": [
		[]
	    ]
	},
	{
	    "id": "4f3360f.6e8332",
	    "type": "function",
	    "z": "f1650fef.f0eb4",
	    "name": "Decode data (port 1 format 21)",
	    "func": "/*\n\nName:   catena-message-port1-format-20-decoder-node-red.js\n\nFunction:\n    Decode port 0x01 format 0x21 messages for Node-RED.\n\nCopyright and License:\n    See accompanying LICENSE file at https://github.com/mcci-catena/MCCI-Catena-4430/\n\nAuthor:\n    Terry Moore, MCCI Corporation   August 2019\n\n*/\n\n// this could be `#include \"catena-message-port1-format-21-decoder-ttn.js\"`\n// but that's not a thing.\n\n// calculate dewpoint (degrees C) given temperature (C) and relative humidity (0..100)\n// from http://andrew.rsmas.miami.edu/bmcnoldy/Humidity.html\n// rearranged for efficiency and to deal sanely with very low (< 1%) RH\nfunction dewpoint(t, rh) {\n    var c1 = 243.04;\n    var c2 = 17.625;\n    var h = rh / 100;\n    if (h <= 0.01)\n        h = 0.01;\n    else if (h > 1.0)\n        h = 1.0;\n\n    var lnh = Math.log(h);\n    var tpc1 = t + c1;\n    var txc2 = t * c2;\n    var txc2_tpc1 = txc2 / tpc1;\n\n    var tdew = c1 * (lnh + txc2_tpc1) / (c2 - lnh - txc2_tpc1);\n    return tdew;\n}\n\n/*\n\nName:   CalculateHeatIndex()\n\nDescription:\n        Calculate the NWS heat index given dry-bulb T and RH\n\nDefinition:\n        function CalculateHeatIndex(t, rh) -> value or null\n\nDescription:\n        T is a Farentheit temperature in [76,120]; rh is a\n        relative humidity in [0,100]. The heat index is computed\n        and returned; or an error is returned.  For consistency with\n        the other temperature, despite the heat index being defined\n        in Farenheit, we return in Celsius.\n\nReturns:\n        number => heat index in Farenheit.\n        null => error.\n\nReferences:\n        https://github.com/mcci-catena/heat-index/\n        https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml\n\n        Results was checked against the full chart at iweathernet.com:\n        https://www.iweathernet.com/wxnetcms/wp-content/uploads/2015/07/heat-index-chart-relative-humidity-2.png\n\n        The MCCI-Catena heat-index site has a test js script to generate CSV to\n        match the chart, a spreadsheet that recreates the chart, and a\n        spreadsheet that compares results.\n\n*/\n\nfunction CalculateHeatIndex(t, rh) {\n    var tRounded = Math.floor(t + 0.5);\n\n    // return null outside the specified range of input parameters\n    if (tRounded < 76 || tRounded > 126)\n        return null;\n    if (rh < 0 || rh > 100)\n        return null;\n\n    // according to the NWS, we try this first, and use it if we can\n    var tHeatEasy = 0.5 * (t + 61.0 + ((t - 68.0) * 1.2) + (rh * 0.094));\n\n    // The NWS says we use tHeatEasy if (tHeatHeasy + t)/2 < 80.0\n    // This is the same computation:\n    if ((tHeatEasy + t) < 160.0)\n            return (tHeatEasy - 32) * 5 / 9;\n\n    // need to use the hard form, and possibly adjust.\n    var t2 = t * t;         // t squared\n    var rh2 = rh * rh;      // rh squared\n    var tResult =\n        -42.379 +\n        (2.04901523 * t) +\n        (10.14333127 * rh) +\n        (-0.22475541 * t * rh) +\n        (-0.00683783 * t2) +\n        (-0.05481717 * rh2) +\n        (0.00122874 * t2 * rh) +\n        (0.00085282 * t * rh2) +\n        (-0.00000199 * t2 * rh2);\n\n    // these adjustments come from the NWA page, and are needed to\n    // match the reference table.\n    var tAdjust;\n    if (rh < 13.0 && 80.0 <= t && t <= 112.0)\n        tAdjust = -((13.0 - rh) / 4.0) * Math.sqrt((17.0 - Math.abs(t - 95.0)) / 17.0);\n    else if (rh > 85.0 && 80.0 <= t && t <= 87.0)\n        tAdjust = ((rh - 85.0) / 10.0) * ((87.0 - t) / 5.0);\n    else\n        tAdjust = 0;\n\n    // apply the adjustment\n    tResult += tAdjust;\n\n    // finally, the reference tables have no data above 183 (rounded),\n    // so filter out answers that we have no way to vouch for.\n    if (tResult >= 183.5)\n        return null;\n    else\n        return (tResult - 32) * 5 / 9;\n}\n\nfunction DecodeU16(Parse) {\n    var i = Parse.i;\n    var bytes = Parse.bytes;\n    var Vraw = (bytes[i] << 8) + bytes[i + 1];\n    Parse.i = i + 2;\n    return Vraw;\n}\n\nfunction DecodeUflt16(Parse) {\n    var rawUflt16 = DecodeU16(Parse);\n    var exp1 = rawUflt16 >> 12;\n    var mant1 = (rawUflt16 & 0xFFF) / 4096.0;\n    var f_unscaled = mant1 * Math.pow(2, exp1 - 15);\n    return f_unscaled;\n}\n\nfunction DecodeSflt16(Parse)\n    {\n    var rawSflt16 = DecodeU16(Parse);\n    // rawSflt16 is the 2-byte number decoded from wherever;\n    // it's in range 0..0xFFFF\n    // bit 15 is the sign bit\n    // bits 14..11 are the exponent\n    // bits 10..0 are the the mantissa. Unlike IEEE format,\n    // the msb is explicit; this means that numbers\n    // might not be normalized, but makes coding for\n    // underflow easier.\n    // As with IEEE format, negative zero is possible, so\n    // we special-case that in hopes that JavaScript will\n    // also cooperate.\n    //\n    // The result is a number in the open interval (-1.0, 1.0);\n    //\n\n    // throw away high bits for repeatability.\n    rawSflt16 &= 0xFFFF;\n\n    // special case minus zero:\n    if (rawSflt16 === 0x8000)\n        return -0.0;\n\n    // extract the sign.\n    var sSign = ((rawSflt16 & 0x8000) !== 0) ? -1 : 1;\n\n    // extract the exponent\n    var exp1 = (rawSflt16 >> 11) & 0xF;\n\n    // extract the \"mantissa\" (the fractional part)\n    var mant1 = (rawSflt16 & 0x7FF) / 2048.0;\n\n    // convert back to a floating point number. We hope\n    // that Math.pow(2, k) is handled efficiently by\n    // the JS interpreter! If this is time critical code,\n    // you can replace by a suitable shift and divide.\n    var f_unscaled = sSign * mant1 * Math.pow(2, exp1 - 15);\n\n    return f_unscaled;\n    }\n\n\nfunction DecodeLight(Parse) {\n    return DecodeU16(Parse);\n}\n\nfunction DecodeActivity(Parse) {\n    return DecodeSflt16(Parse);\n}\n\nfunction DecodeI16(Parse) {\n    var Vraw = DecodeU16(Parse);\n\n    // interpret uint16 as an int16 instead.\n    if (Vraw & 0x8000)\n        Vraw += -0x10000;\n\n    return Vraw;\n}\n\nfunction DecodeI16(Parse) {\n    var i = Parse.i;\n    var bytes = Parse.bytes;\n    var Vraw = (bytes[i] << 8) + bytes[i + 1];\n    Parse.i = i + 2;\n\n    // interpret uint16 as an int16 instead.\n    if (Vraw & 0x8000)\n        Vraw += -0x10000;\n\n    return Vraw;\n}\n\nfunction DecodeV(Parse) {\n    return DecodeI16(Parse) / 4096.0;\n}\n\nfunction Decoder(bytes, port) {\n    // Decode an uplink message from a buffer\n    // (array) of bytes to an object of fields.\n    var decoded = {};\n\n    if (! (port === 1))\n        return null;\n\n    var uFormat = bytes[0];\n    if (! (uFormat === 0x21))\n        return null;\n\n    // an object to help us parse.\n    var Parse = {};\n    Parse.bytes = bytes;\n    // i is used as the index into the message. Start with the flag byte.\n    Parse.i = 1;\n\n    // fetch the bitmap.\n    var flags = bytes[Parse.i++];\n\n    if (flags & 0x1) {\n        decoded.vBat = DecodeV(Parse);\n    }\n\n    if (flags & 0x2) {\n        decoded.vSys = DecodeV(Parse);\n    }\n\n    if (flags & 0x4) {\n        decoded.vBus = DecodeV(Parse);\n    }\n\n    if (flags & 0x8) {\n        var iBoot = bytes[Parse.i++];\n        decoded.boot = iBoot;\n    }\n\n    if (flags & 0x10) {\n        // we have temp, pressure, RH\n        decoded.tempC = DecodeI16(Parse) / 256;\n        decoded.p = DecodeU16(Parse) * 4 / 100.0;\n        decoded.rh = DecodeU16(Parse) * 100 / 65535.0;\n        decoded.tDewC = dewpoint(decoded.tempC, decoded.rh);\n        var tHeat = CalculateHeatIndex(decoded.tempC * 1.8 + 32, decoded.rh);\n        if (tHeat !== null)\n            decoded.tHeatIndexC = tHeat;\n    }\n\n    if (flags & 0x21) {\n        // we have light\n        decoded.irradiance = {};\n        decoded.irradiance.IR = DecodeLight(Parse);\n        decoded.irradiance.White = DecodeLight(Parse);\n        decoded.irradiance.UV = DecodeLight(Parse);\n    }\n\n    if (flags & 0x40) {\n        // we have Activity\n        decoded.activity = {};\n        decoded.activity.Avg = DecodeActivity(Parse);\n        decoded.activity.Min = DecodeActivity(Parse);\n        decoded.activity.Max = DecodeActivity(Parse);\n    }\n\n    return decoded;\n}\n\n// end of insertion of catena-message-port1-format-21-decoder-ttn.js\n\n/*\n\nNode-RED function body.\n\nInput:\n    msg     the object to be decoded.  \n    \n            msg.payload_raw is taken\n            as the raw payload if present; otheriwse msg.payload\n            is taken to be a raw payload.\n\n            msg.port is taken to be the LoRaWAN port nubmer.\n\n\nReturns:\n    This function returns a message body. It's a mutation of the\n    input msg; msg.payload is changed to the decoded data, and\n    msg.local is set to additional application-specific information.\n\n*/\n\nvar bytes;\n\nif (\"payload_raw\" in msg) {\n    // the console already decoded this\n    bytes = msg.payload_raw;  // pick up data for convenience\n    // msg.payload_fields still has the decoded data from ttn\n} else {\n    // no console decode\n    bytes = msg.payload;  // pick up data for conveneince\n}\n\n// try to decode.\nvar result = Decoder(bytes, msg.port);\n\nif (result === null) {\n    // not one of ours: report an error, return without a value,\n    // so that Node-RED doesn't propagate the message any further.\n    var eMsg = \"not port 1/fmt 0x21! port=\" + msg.port.toString();\n    if (port === 1) {\n        if (Buffer.byteLength(bytes) > 0) {\n            eMsg = eMsg + \" fmt=\" + bytes[0].toString();\n        } else {\n            eMsg = eMsg + \" <no fmt byte>\"\n        }\n    }\n    node.error(eMsg);\n    return;\n}\n\n// now update msg with the new payload and new .local field\n// the old msg.payload is overwritten.\nmsg.payload = result;\nmsg.local =\n    {\n        nodeType: \"Catena 4430\",\n        platformType: \"Catena 4610\",\n        radioType: \"Murata\",\n        applicationName: \"Mouse activity sensor\"\n    };\n\nreturn msg;\n",
	    "outputs": 1,
	    "noerr": 0,
	    "x": 290.9999694824219,
	    "y": 317,
	    "wires": [
		[
		    "655c9127.68dfc8",
		    "8dc48011.3c18f"
		]
	    ]
	},
	{
	    "id": "170ccef1.151f61",
	    "type": "subflow:7d5b92cc.87fd5c",
	    "z": "f1650fef.f0eb4",
	    "x": 299,
	    "y": 158,
	    "wires": [
		[
		    "4f3360f.6e8332"
		]
	    ]
	},
	{
	    "id": "1fd7f669.5da94a",
	    "type": "comment",
	    "z": "f1650fef.f0eb4",
	    "name": "Data after preparation",
	    "info": "",
	    "x": 1018.7499423556858,
	    "y": 243.08338250054248,
	    "wires": []
	},
	{
	    "id": "8dc48011.3c18f",
	    "type": "subflow:d94d197e.b02ea",
	    "z": "f1650fef.f0eb4",
	    "name": "",
	    "x": 836.8888431125217,
	    "y": 491.2222069634331,
	    "wires": [
		[]
	    ]
	},
	{
	    "id": "17454179.9b76ef",
	    "type": "tab",
	    "label": "Wakefield"
	},
	{
	    "id": "5ea0a198.0e3cb8",
	    "type": "ttn message",
	    "z": "17454179.9b76ef",
	    "name": "wustl-activity",
	    "app": "86c840da.bb3d6",
	    "dev_id": "",
	    "field": "",
	    "x": 260,
	    "y": 267,
	    "wires": [
		[
		    "305f2df0.fe7d4a"
		]
	    ]
	},
	{
	    "id": "305f2df0.fe7d4a",
	    "type": "subflow:f1650fef.f0eb4",
	    "z": "17454179.9b76ef",
	    "x": 650,
	    "y": 266.5,
	    "wires": [
		[
		    "927945fb.e31de8"
		],
		[
		    "3e2b0ff0.d7df08",
		    "1c6f38a.6f51547"
		],
		[
		    "d7385db9.140628",
		    "acd7a81.f4f8fd8",
		    "9576d939.2e7438"
		]
	    ]
	},
	{
	    "id": "927945fb.e31de8",
	    "type": "debug",
	    "z": "17454179.9b76ef",
	    "name": "Wakefield decoded device data",
	    "active": false,
	    "console": "false",
	    "complete": "true",
	    "x": 1221,
	    "y": 110,
	    "wires": []
	},
	{
	    "id": "3e2b0ff0.d7df08",
	    "type": "debug",
	    "z": "17454179.9b76ef",
	    "name": "Wakefield database output",
	    "active": false,
	    "console": "false",
	    "complete": "true",
	    "x": 1203,
	    "y": 206,
	    "wires": []
	},
	{
	    "id": "1c6f38a.6f51547",
	    "type": "influxdb out",
	    "z": "17454179.9b76ef",
	    "influxdb": "59db2dbb.ba6214",
	    "name": "Write to wustl_activity_db..ActivityData",
	    "measurement": "ActivityData",
	    "precision": "",
	    "retentionPolicy": "",
	    "x": 1230,
	    "y": 259,
	    "wires": []
	},
	{
	    "id": "acd7a81.f4f8fd8",
	    "type": "influxdb out",
	    "z": "17454179.9b76ef",
	    "influxdb": "59db2dbb.ba6214",
	    "name": "Write to wustl_activity_db..RFmetrics",
	    "measurement": "RFmetrics",
	    "precision": "",
	    "retentionPolicy": "",
	    "x": 1242,
	    "y": 393,
	    "wires": []
	},
	{
	    "id": "9576d939.2e7438",
	    "type": "influxdb out",
	    "z": "17454179.9b76ef",
	    "influxdb": "be94add.799ae5",
	    "name": "Store RF metrics (global)",
	    "measurement": "RFmetrics",
	    "precision": "",
	    "retentionPolicy": "",
	    "x": 1204,
	    "y": 442,
	    "wires": []
	},
	{
	    "id": "d7385db9.140628",
	    "type": "debug",
	    "z": "17454179.9b76ef",
	    "name": "Wakefield RF metrics to database",
	    "active": false,
	    "console": "false",
	    "complete": "true",
	    "x": 1233,
	    "y": 350,
	    "wires": []
	},
	{
	    "id": "86c840da.bb3d6",
	    "type": "ttn app",
	    "z": "",
	    "appId": "wustl-activity",
	    "region": "us-west",
	    "accessKey": "REDACTED"
	},
	{
	    "id": "59db2dbb.ba6214",
	    "type": "influxdb",
	    "z": "",
	    "hostname": "influxdb",
	    "port": "8086",
	    "protocol": "http",
	    "database": "wustl_activity_db",
	    "name": "wustl_activity_db",
	    "usetls": false,
	    "tls": ""
	},
	{
	    "id": "be94add.799ae5",
	    "type": "influxdb",
	    "z": "",
	    "hostname": "influxdb",
	    "port": "8086",
	    "protocol": "http",
	    "database": "RFmetrics",
	    "name": "RF metrics",
	    "usetls": false,
	    "tls": ""
	}
    ]